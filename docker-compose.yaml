version: "3.3"

services:
  redis:
    expose:
      - "6379"
    image: redis:alpine
    volumes:
      - redis:/data
  postgres:
    platform: arm64
    expose:
      - "5432"
    build:
      context: .
      dockerfile: ./postgres/Dockerfile
    environment:
      POSTGRES_USER: go
      POSTGRES_PASSWORD: password
      POSTGRES_DB: cyntra_local
    volumes:
      - pg-db:/var/lib/postgresql/data
  postgres-pooler:
    expose:
      - "5432"
    ports:
      - 5433:5432
    image: timoha/pgbouncer:1.15.0
    environment:
      DB_USER: go
      DB_PASSWORD: password
      DB_HOST: postgres
      DB_NAME: cyntra_local
      POOL_MODE: transaction
      DEFAULT_POOL_SIZE: 15
      MIN_POOL_SIZE: 7
      RESERVE_POOL_SIZE: 7
      MAX_CLIENT_CONN: 10000
      MAX_DB_CONNECTIONS: 30
    depends_on:
      - postgres
  etcd:
    image: quay.io/coreos/etcd:v3.5.2
    entrypoint: /usr/local/bin/etcd
    ports:
      - 2379
    command:
      - '--name=etcd'
      - '--advertise-client-urls=http://etcd:2379,http://etcd:4001'
      - '--listen-client-urls=http://0.0.0.0:2379,http://0.0.0.0:4001'
      - '--initial-advertise-peer-urls=http://etcd:2380' 
      - '--listen-peer-urls=http://0.0.0.0:2380' 
      - '--initial-cluster-token=etcd-cluster-1' 
      - '--initial-cluster=etcd=http://etcd:2380'
      - '--initial-cluster-state=new'
    volumes:
      - etcd:/etcd_data
  
  zookeeper:
    platform: arm64
    build:
      context: ./debezium-docker-images/zookeeper/1.9
    ports:
     - 2181:2181
     - 2888:2888
     - 3888:3888

  kafka:
    platform: arm64
    build:
      context: ./debezium-docker-images/kafka/1.9
    ports:
     - 9092:9092
    links:
     - zookeeper
    environment:
     - ZOOKEEPER_CONNECT=zookeeper:2181
    volumes:
      - kafka:/kafka/data
    depends_on:
      - zookeeper
  
  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.4
    ports:
     - "9200:9200"
    environment:
     - http.host=0.0.0.0
     - transport.host=127.0.0.1
     - xpack.security.enabled=false
     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - es:/usr/share/elasticsearch/data

  connect:
    # image: quay.io/debezium/connect:1.9
    platform: arm64
    build:
      # context: debezium-kafka-connect
      context: ./debezium-docker-images/connect/1.9
      # args:
      #   DEBEZIUM_VERSION: 1.9
    ports:
     - 8083:8083
     - 5005:5005
    links:
     - kafka
     - elastic
    environment:
     - BOOTSTRAP_SERVERS=kafka:9092
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=my_connect_configs
     - OFFSET_STORAGE_TOPIC=my_connect_offsets
     - STATUS_STORAGE_TOPIC=my_source_connect_statuses
     - REST_HOST_NAME=0.0.0.0
    depends_on:
     - kafka
     - elastic
     - postgres-pooler

  user-svc:
    ports:
      - 8080:8080
    deploy:
      resources:
        limits:
          cpus: 2
          memory: 8G
        reservations:
          cpus: 1
          memory: 4G
    build:
      context: .
      dockerfile: ./user/rpc/Dockerfile
    environment:
      USER_SVC_PORT: 8080
      JWT_SECRET: topsecret
      JWT_EXPIRY_SECONDS: 900
      JWT_REFRESH_EXPIRY_SECONDS: 604800
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis:6379
      ETCD_HOST: etcd:2379
      POSTGRES_URL: postgres://go:password@postgres-pooler:5432/cyntra_local?sslmode=disable
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=user-svc:8080"]
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      - redis
      - postgres-pooler
      - etcd
  
  product-svc:
    ports:
      - 8081:8081
    build:
      context: .
      dockerfile: ./product/rpc/Dockerfile
    environment:
      PRODUCT_SVC_PORT: 8081
      ETCD_HOST: etcd:2379
      POSTGRES_URL: postgres://go:password@postgres-pooler:5432/cyntra_local?sslmode=disable
    healthcheck:
      test: ["CMD", "/bin/grpc_health_probe", "-addr=user-svc:8080"]
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      - user-svc
      - postgres-pooler
      - etcd
  
  gateway:
    ports:
      - "127.0.0.1:8888:8888"
    build:
      context: .
      dockerfile: gateway/api/Dockerfile
    environment:
      ETCD_HOST: etcd:2379
      GATEWAY_PORT: 8888
    depends_on:
      user-svc:
        condition: service_healthy
      
volumes:
     pg-db: 
     etcd:
     redis:
     kafka:
     es:

# To run etcd locally without docker-compose
# docker run -d -v /usr/share/ca-certificates/:/etc/ssl/certs -p 4001:4001 -p 2380:2380 -p 2379:2379 \
#  --name etcd quay.io/coreos/etcd:v3.5.2 \
#  /usr/local/bin/etcd \
#  --name=etcd0 \
#  --advertise-client-urls http://127.0.0.1:2379,http://127.0.0.1:4001 \
#  --listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \
#  --initial-advertise-peer-urls http://127.0.0.1:2380 \
#  --listen-peer-urls http://0.0.0.0:2380 \
#  --initial-cluster-token etcd-cluster-1 \
#  --initial-cluster etcd0=http://127.0.0.1:2380 \
#  --initial-cluster-state new