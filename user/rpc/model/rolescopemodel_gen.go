// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleScopeFieldNames          = builder.RawFieldNames(&RoleScope{}, true)
	roleScopeRows                = strings.Join(roleScopeFieldNames, ",")
	roleScopeRowsExpectAutoSet   = strings.Join(stringx.Remove(roleScopeFieldNames, "id", "create_time", "update_time"), ",")
	roleScopeRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(roleScopeFieldNames, "id", "create_time", "update_time"))

	cachePublicRoleScopeIdPrefix = "cache:public:roleScope:id:"
)

type (
	roleScopeModel interface {
		Insert(ctx context.Context, data *RoleScope) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RoleScope, error)
		Update(ctx context.Context, data *RoleScope) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoleScopeModel struct {
		sqlc.CachedConn
		table string
	}

	RoleScope struct {
		Id         int64     `db:"id"`
		RoleId     string    `db:"role_id"`
		ScopeId    string    `db:"scope_id"`
		CreatedAt  time.Time `db:"created_at"`
		UpdatedAt  time.Time `db:"updated_at"`
		ArchivedAt time.Time `db:"archived_at"`
	}
)

func newRoleScopeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultRoleScopeModel {
	return &defaultRoleScopeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."role_scope"`,
	}
}

func (m *defaultRoleScopeModel) Insert(ctx context.Context, data *RoleScope) (sql.Result, error) {
	publicRoleScopeIdKey := fmt.Sprintf("%s%v", cachePublicRoleScopeIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, roleScopeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RoleId, data.ScopeId, data.CreatedAt, data.UpdatedAt, data.ArchivedAt)
	}, publicRoleScopeIdKey)
	return ret, err
}

func (m *defaultRoleScopeModel) FindOne(ctx context.Context, id int64) (*RoleScope, error) {
	publicRoleScopeIdKey := fmt.Sprintf("%s%v", cachePublicRoleScopeIdPrefix, id)
	var resp RoleScope
	err := m.QueryRowCtx(ctx, &resp, publicRoleScopeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", roleScopeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleScopeModel) Update(ctx context.Context, data *RoleScope) error {
	publicRoleScopeIdKey := fmt.Sprintf("%s%v", cachePublicRoleScopeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, roleScopeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.RoleId, data.ScopeId, data.CreatedAt, data.UpdatedAt, data.ArchivedAt)
	}, publicRoleScopeIdKey)
	return err
}

func (m *defaultRoleScopeModel) Delete(ctx context.Context, id int64) error {
	publicRoleScopeIdKey := fmt.Sprintf("%s%v", cachePublicRoleScopeIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicRoleScopeIdKey)
	return err
}

func (m *defaultRoleScopeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicRoleScopeIdPrefix, primary)
}

func (m *defaultRoleScopeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", roleScopeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRoleScopeModel) tableName() string {
	return m.table
}
