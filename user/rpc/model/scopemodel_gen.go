// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	scopeFieldNames          = builder.RawFieldNames(&Scope{}, true)
	scopeRows                = strings.Join(scopeFieldNames, ",")
	scopeRowsExpectAutoSet   = strings.Join(stringx.Remove(scopeFieldNames, "create_time", "update_time"), ",")
	scopeRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(scopeFieldNames, "id", "create_time", "update_time"))

	cachePublicScopeIdPrefix   = "cache:public:scope:id:"
	cachePublicScopeNamePrefix = "cache:public:scope:name:"
)

type (
	scopeModel interface {
		Insert(ctx context.Context, data *Scope) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Scope, error)
		FindOneByName(ctx context.Context, name string) (*Scope, error)
		Update(ctx context.Context, data *Scope) error
		Delete(ctx context.Context, id string) error
	}

	defaultScopeModel struct {
		sqlc.CachedConn
		table string
	}

	Scope struct {
		Id         string    `db:"id"`
		Name       string    `db:"name"`
		CreatedAt  time.Time `db:"created_at"`
		UpdatedAt  time.Time `db:"updated_at"`
		ArchivedAt time.Time `db:"archived_at"`
	}
)

func newScopeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultScopeModel {
	return &defaultScopeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."scope"`,
	}
}

func (m *defaultScopeModel) Insert(ctx context.Context, data *Scope) (sql.Result, error) {
	publicScopeIdKey := fmt.Sprintf("%s%v", cachePublicScopeIdPrefix, data.Id)
	publicScopeNameKey := fmt.Sprintf("%s%v", cachePublicScopeNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5)", m.table, scopeRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.CreatedAt, data.UpdatedAt, data.ArchivedAt)
	}, publicScopeIdKey, publicScopeNameKey)
	return ret, err
}

func (m *defaultScopeModel) FindOne(ctx context.Context, id string) (*Scope, error) {
	publicScopeIdKey := fmt.Sprintf("%s%v", cachePublicScopeIdPrefix, id)
	var resp Scope
	err := m.QueryRowCtx(ctx, &resp, publicScopeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", scopeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultScopeModel) FindOneByName(ctx context.Context, name string) (*Scope, error) {
	publicScopeNameKey := fmt.Sprintf("%s%v", cachePublicScopeNamePrefix, name)
	var resp Scope
	err := m.QueryRowIndexCtx(ctx, &resp, publicScopeNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where name = $1 limit 1", scopeRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultScopeModel) Update(ctx context.Context, data *Scope) error {
	publicScopeIdKey := fmt.Sprintf("%s%v", cachePublicScopeIdPrefix, data.Id)
	publicScopeNameKey := fmt.Sprintf("%s%v", cachePublicScopeNamePrefix, data.Name)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, scopeRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.CreatedAt, data.UpdatedAt, data.ArchivedAt)
	}, publicScopeIdKey, publicScopeNameKey)
	return err
}

func (m *defaultScopeModel) Delete(ctx context.Context, id string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	publicScopeIdKey := fmt.Sprintf("%s%v", cachePublicScopeIdPrefix, id)
	publicScopeNameKey := fmt.Sprintf("%s%v", cachePublicScopeNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where id = $1", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, publicScopeIdKey, publicScopeNameKey)
	return err
}

func (m *defaultScopeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicScopeIdPrefix, primary)
}

func (m *defaultScopeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", scopeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultScopeModel) tableName() string {
	return m.table
}
