// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productFieldNames          = builder.RawFieldNames(&Product{}, true)
	productRows                = strings.Join(productFieldNames, ",")
	productRowsExpectAutoSet   = strings.Join(stringx.Remove(productFieldNames, "create_time", "update_time"), ",")
	productRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(productFieldNames, "id", "create_time", "update_time"))
)

type (
	productModel interface {
		Insert(ctx context.Context, data *Product) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Product, error)
		FindOneByName(ctx context.Context, name string) (*Product, error)
		Update(ctx context.Context, data *Product) error
		Delete(ctx context.Context, id string) error
	}

	defaultProductModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Product struct {
		Id              string         `db:"id"`
		Name            string         `db:"name"`
		Price           int64          `db:"price"`
		Description     string         `db:"description"`
		Size            string         `db:"size"`
		Color           string         `db:"color"`
		Brand           string         `db:"brand"`
		Shade           string         `db:"shade"`
		WashCare        sql.NullString `db:"wash_care"`
		Stretchable     sql.NullString `db:"stretchable"`
		Distress        sql.NullString `db:"distress"`
		Features        sql.NullString `db:"features"`
		Fade            sql.NullString `db:"fade"`
		Fabric          string         `db:"fabric"`
		Category        string         `db:"category"`
		CountryOfOrigin string         `db:"country_of_origin"`
		Discount        int64          `db:"discount"`
		Quantity        int64          `db:"quantity"`
		CreatedAt       time.Time      `db:"created_at"`
		UpdatedAt       time.Time      `db:"updated_at"`
		ArchivedAt      sql.NullTime   `db:"archived_at"`
	}
)

func newProductModel(conn sqlx.SqlConn) *defaultProductModel {
	return &defaultProductModel{
		conn:  conn,
		table: `"public"."product"`,
	}
}

func (m *defaultProductModel) Insert(ctx context.Context, data *Product) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21)", m.table, productRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Price, data.Description, data.Size, data.Color, data.Brand, data.Shade, data.WashCare, data.Stretchable, data.Distress, data.Features, data.Fade, data.Fabric, data.Category, data.CountryOfOrigin, data.Discount, data.Quantity, data.CreatedAt, data.UpdatedAt, data.ArchivedAt)
	return ret, err
}

func (m *defaultProductModel) FindOne(ctx context.Context, id string) (*Product, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 and archived_at is null limit 1", productRows, m.table)
	var resp Product
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductModel) FindOneByName(ctx context.Context, name string) (*Product, error) {
	var resp Product
	query := fmt.Sprintf("select %s from %s where name = $1 limit 1", productRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductModel) Update(ctx context.Context, data *Product) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, productRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Price, data.Description, data.Size, data.Color, data.Brand, data.Shade, data.WashCare, data.Stretchable, data.Distress, data.Features, data.Fade, data.Fabric, data.Category, data.CountryOfOrigin, data.Discount, data.Quantity, data.CreatedAt, data.UpdatedAt, data.ArchivedAt)
	return err
}

func (m *defaultProductModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProductModel) tableName() string {
	return m.table
}
